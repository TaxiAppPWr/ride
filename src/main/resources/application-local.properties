spring.application.name=RideService

server.address=0.0.0.0
server.port=80

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/taxiapp}
spring.datasource.username=${SPRING_DATABASE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATABASE_PASSWORD:postgres}
spring.jpa.properties.hibernate.default_schema=ride

spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

rabbit.exchange.ride.name=ride
rabbit.exchange.driver-matching.name=driver.matching.exchange
rabbit.queue.ride.name=ride
rabbit.routing-key.ppayment.status-updated=passenger-payment.status-updated
rabbit.routing-key.ppayment.generate=payment.passenger-payment.generate
rabbit.routing-key.driver-matching.failed=driver.matching.failed
rabbit.routing-key.driver-matching.successful=driver.matching
rabbit.routing-key.ride.cancel=ride.cancel
rabbit.routing-key.ride.finished=ride.finished

service.address.ppayment=${PASSENGER_PAYMENT_SERVICE_ADDRESS:http://localhost:81}
service.address.fare=${FARE_SERVICE_ADDRESS:http://localhost:83}
service.address.maps=${MAPS_SERVICE_ADDRESS:http://localhost:84}
service.address.matching=${MATCHING_SERVICE_ADDRESS:http://localhost:85}
service.address.notification=${MESSAGING_SERVICE_ADDRESS:http://localhost:87}
service.address.drivers=${DRIVERS_SERVICE_ADDRESS:http://localhost:88}
